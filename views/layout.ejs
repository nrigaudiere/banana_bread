<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html" charset="UTF-8" />
	<title>Banana Bread | Official Website</title>

	<link rel="apple-touch-icon" sizes="57x57" href="favicon/apple-icon-57x57.png">
	<link rel="apple-touch-icon" sizes="60x60" href="favicon/apple-icon-60x60.png">
	<link rel="apple-touch-icon" sizes="72x72" href="favicon/apple-icon-72x72.png">
	<link rel="apple-touch-icon" sizes="76x76" href="favicon/apple-icon-76x76.png">
	<link rel="apple-touch-icon" sizes="114x114" href="favicon/apple-icon-114x114.png">
	<link rel="apple-touch-icon" sizes="120x120" href="favicon/apple-icon-120x120.png">
	<link rel="apple-touch-icon" sizes="144x144" href="favicon/apple-icon-144x144.png">
	<link rel="apple-touch-icon" sizes="152x152" href="favicon/apple-icon-152x152.png">
	<link rel="apple-touch-icon" sizes="180x180" href="favicon/apple-icon-180x180.png">
	<link rel="icon" type="image/png" sizes="192x192"  href="favicon/android-icon-192x192.png">
	<link rel="icon" type="image/png" sizes="32x32" href="favicon/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="96x96" href="favicon/favicon-96x96.png">
	<link rel="icon" type="image/png" sizes="16x16" href="favicon/favicon-16x16.png">
	<link rel="manifest" href="favicon/manifest.json">
	<meta name="msapplication-TileColor" content="#ffffff">
	<meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
	<meta name="theme-color" content="#ffffff">

	<!-- Viewport mobile tag for sensible mobile support -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

	
	<!--  
		Stylesheets and Preprocessors
		==============================

		You can always bring in CSS files manually with `<link>` tags, or asynchronously
		using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
		of Sails' conventional asset pipeline (boilerplate Gruntfile).

		By default, stylesheets from your `assets/styles` folder are included
		here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
		are supported. In production, your styles will be minified and concatenated into
		a single file.
		
		To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:
			
			+ Change the order of your CSS files
			+ Import stylesheets from other directories
			+ Use a different or additional preprocessor, like SASS, SCSS or Stylus
		-->

		<!--STYLES-->
		<link rel="stylesheet" href="/styles/importer.css">
		<!--STYLES END-->
	</head>

	<body>

		<header>
			<nav class="navbar navbar-fixed-top" role="navigation">
				<div class="container-fluid">
					<div class="navbar-header">
						<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
							<span class="icon-bar"></span>
							<span class="icon-bar"></span>
							<span class="icon-bar"></span>
						</button>
					<!-- <a class="navbar-brand" href="#">Brand</a> -->
					</div>
					<div class="collapse navbar-collapse">
						<ul class="nav navbar-nav">
							<li><a href="#description" title="Description">Description</a></li>
							<li><a href="#works" title="Works">Works</a></li>
							<li><a href="#testimonials" title="Testimonials">Testimonials</a></li>
							<li><a href="#home" title="home"><img src="images/ressources/logo.png" alt="logo"></a></li>
							<li><a href="#blogPosts" title="Blog">Blog</a></li>
							<li><a href="#contact" title="Contact Me">Contact Me</a></li>
							<li><a href="#about" title="Contact Me">About</a></li>
						</ul>
					</div>	
				</div>
				
			</nav>
		</header><!-- /header -->

		<%- body %>
		

		<footer>
			<small>Copyright &copy; Banana Bread</small>
		</footer>

	<!--
		Client-side Templates
		========================

		HTML templates are important prerequisites of modern, rich client applications.
		To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
		that you load these templates client-side.

		By default, your Gruntfile is configured to automatically load and precompile
		client-side JST templates in your `assets/templates` folder, then
		include them here automatically (between TEMPLATES and TEMPLATES END).
		
		To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:

			+ Import templates from other directories
			+ Use a different template engine (handlebars, jade, dust, etc.)
			+ Internationalize your client-side templates using a server-side
			  stringfile before they're served.
			-->

			<!--TEMPLATES-->
			
			<!--TEMPLATES END-->


	<!--

	  Client-side Javascript
	  ========================

	  You can always bring in JS files manually with `script` tags, or asynchronously
	  on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
	  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

	  By default, files in your `assets/js` folder are included here
	  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
	  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
	  and concatenated into a single file.
	  
	  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
	  For example, here are a few things you could do:
		  
		  + Change the order of your scripts
		  + Import scripts from other directories
		  + Use a different preprocessor, like TypeScript

		-->

		<!--SCRIPTS-->
		<script src="/js/dependencies/sails.io.js"></script>
		<script src="/js/dependencies/angular2/bundles/angular2-polyfills.js"></script>
		<script src="/js/dependencies/rxjs/bundles/Rx.umd.js"></script>
		<script src="/js/dependencies/angular2/bundles/angular2-all.umd.js"></script>
		<script src="/js/app/app.component.js"></script>
		<script src="/js/app/boot.js"></script>
		<script src="/js/dependencies/jquery/dist/jquery.min.js"></script>
		<!--SCRIPTS END-->
	</body>
	</html>
